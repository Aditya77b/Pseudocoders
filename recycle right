#  Backend code snippet using Flask framework with a pre-trained image recognition model for plastic identification 

from flask import Flask, request, jsonify
import cv2
import numpy as np
from PIL import Image
import base64
from tensorflow.keras.models import load_model  # Assuming a pre-trained model for plastic classification 

app = Flask(__name__)

# Load the pre-trained model
model = load_model('plastic_classification_model.h5')  # Replace with your model file path

# Function to preprocess image for prediction 
def preprocess_image(image_data):
    img = Image.fromarray(image_data)
    img = img.resize((224, 224))  # Adjust to model input size
    img = np.asarray(img) / 255.0
    img = np.expand_dims(img, axis=0) 
    return img

# Route to handle image upload and prediction
@app.route('/classify_plastic', methods=['POST'])
def classify_plastic():
    if 'image' in request.files:
        image = request.files['image'].read()
        np_image = np.frombuffer(image, dtype=np.uint8)
        decoded_img = cv2.imdecode(np_image, cv2.IMREAD_COLOR)
        
        # Preprocess image
        processed_img = preprocess_image(decoded_img)

        # Make prediction 
        prediction = model.predict(processed_img)
        plastic_type =  "PET" if np.argmax(prediction) == 0 else "HDPE"  # Replace with your actual plastic type mapping 

        return jsonify({'plastic_type': plastic_type, 'message': 'Image classified as ' + plastic_type})
    
    return jsonify({'error': 'Invalid image format'}) 

# Example usage with a local recycling center database
@app.route('/get_local_recycling_info', methods=['GET'])
def get_local_recycling_info():
    # Fetch user location (using IP geolocation or other methods)
    user_location = get_user_location() 
    
    # Query database for nearest recycling centers
    recycling_centers = get_recycling_centers_by_location(user_location)
    
    return jsonify({'recycling_centers': recycling_centers}) 

if __name__ == "__main__":
    app.run(debug=True) 
